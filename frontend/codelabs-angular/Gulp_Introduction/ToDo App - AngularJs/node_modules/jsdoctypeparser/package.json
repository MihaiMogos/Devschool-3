{
  "_args": [
    [
      {
        "raw": "jsdoctypeparser@~1.2.0",
        "scope": null,
        "escapedName": "jsdoctypeparser",
        "name": "jsdoctypeparser",
        "rawSpec": "~1.2.0",
        "spec": ">=1.2.0 <1.3.0",
        "type": "range"
      },
      "D:\\devschool\\frontend\\codelabs\\gulp\\Gulp_Introduction\\ToDo App - AngularJs\\node_modules\\jscs-jsdoc"
    ]
  ],
  "_from": "jsdoctypeparser@>=1.2.0 <1.3.0",
  "_id": "jsdoctypeparser@1.2.0",
  "_inCache": true,
  "_location": "/jsdoctypeparser",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "orgachem",
    "email": "orga.chem.job@gmail.com"
  },
  "_npmVersion": "2.7.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsdoctypeparser@~1.2.0",
    "scope": null,
    "escapedName": "jsdoctypeparser",
    "name": "jsdoctypeparser",
    "rawSpec": "~1.2.0",
    "spec": ">=1.2.0 <1.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jscs-jsdoc"
  ],
  "_resolved": "https://registry.npmjs.org/jsdoctypeparser/-/jsdoctypeparser-1.2.0.tgz",
  "_shasum": "e7dedc153a11849ffc5141144ae86a7ef0c25392",
  "_shrinkwrap": null,
  "_spec": "jsdoctypeparser@~1.2.0",
  "_where": "D:\\devschool\\frontend\\codelabs\\gulp\\Gulp_Introduction\\ToDo App - AngularJs\\node_modules\\jscs-jsdoc",
  "author": {
    "name": "Kuniwak",
    "email": "orga.chem.job@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/Kuniwak/jsdoctypeparser/issues"
  },
  "dependencies": {
    "lodash": "^3.7.0"
  },
  "description": "Strict JsDoc type expression parser.",
  "devDependencies": {
    "benchmark": "~1.0.0",
    "chai": "^2.2.0",
    "eslint": "^0.20.0",
    "gulp": "^3.8.11",
    "gulp-notify": "^2.2.0",
    "gulp-peg": "^0.1.2",
    "gulp-plumber": "^0.6.6",
    "jscs": "^1.13.1",
    "mocha": "^2.2.4"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "e7dedc153a11849ffc5141144ae86a7ef0c25392",
    "tarball": "https://registry.npmjs.org/jsdoctypeparser/-/jsdoctypeparser-1.2.0.tgz"
  },
  "gitHead": "5444d4dab68e9670ff97bd27993da8a28aad4b2b",
  "homepage": "https://github.com/Kuniwak/jsdoctypeparser#readme",
  "keywords": [
    "jsdoc",
    "type expression",
    "parser"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "orgachem",
      "email": "orga.chem.job@gmail.com"
    }
  ],
  "name": "jsdoctypeparser",
  "optionalDependencies": {},
  "readme": "# Jsdoc type parser\n[![Build Status](https://travis-ci.org/Kuniwak/jsdoctypeparser.svg?branch=master)](https://travis-ci.org/Kuniwak/jsdoctypeparser)\n[![NPM version](https://badge.fury.io/js/jsdoctypeparser.svg)](http://badge.fury.io/js/jsdoctypeparser)\n\nThis module is Jsdoc type expression parser, it makes easy to publish a type name link by `toHTML()`.\n\nThis parser provide:\n\n* Parse to object model\n* Convert a type name to a link by using `toHtml()`\n\n```javascript\nvar Parser = require('jsdoctypeparser').Parser;\nvar parser = new Parser();\nvar result = parser.parse('Array.<MyClass>=');\n\nconsole.log(result.toHtml()); // ⇒ 'Array.&lt;<a href=\"MyClass.html\">MyClass</a>&gt;|undefined'\nconsole.log(result.toString()); // ⇒ 'Array.<MyClass>|undefined'\n```\n\nThis parser can parse:\n\n* [JsDoc type expressions](https://code.google.com/p/jsdoc-toolkit/wiki/TagParam)\n  * `foo.bar`, `String[]`\n* [Closure Compiler type expressions](https://developers.google.com/closure/compiler/docs/js-for-compiler)\n  * `Array.<string>`, `function(this: Objext, arg1, arg2): ret`\n* Nested type expressions\n  * `Array.<Array.<string>>`, `function(function(Function))`\n\n\n## Live demo\nThe [live demo](http://kuniwak.github.io/jsdoctypeparser/) is available.\n\n\n## Publishing\n\n```javascript\nvar Parser = require('jsdoctypeparser').Parser;\nvar parser = new Parser();\nvar result = parser.parse('Array.<MyClass>=');\n```\n\n* `result.toString()` ⇒ `'Array.<MyClass>|undefined'`\n\n* `result.toHtml()` ⇒ `'Array.&lt;<a href=\"MyClass.html\">MyClass</a>&gt;|undefined'`\n\n### Customize type name URI\nYou can change a file URL by set `TypeBulder.TypeName.getUrlByTypeName(typeName)`.\n\n```javascript\nvar Builder = require('jsdoctypeparser').Builder;\nBulder.TypeName.getUrlByTypeName = function(typeName) {\n  // do something.\n  return typeName;\n}; \n```\n\n## Parsing\n\n```javascript\nvar Parser = require('jsdoctypeparser').Parser;\nvar parser = new Parser();\nvar result = parser.parse('Array.<string|number, ?Object=>|string|undefined');\n```\n\nThe `result` is:\n\n```javascript\n{ // instanceof TypeBuilder.TypeUnion\n  optional: true,\n  types: [\n    { // instanceof TypeBuilder.FunctionType\n      parameterTypeUnions: [\n        { // instanceof TypeBuilder.TypeUnion\n          types: [\n            { name: 'string' }, // instanceof TypeBuilder.TypeName\n            { name: 'number' }  // instanceof TypeBuilder.TypeName\n          ]\n        },\n        { // instanceof TypeBuilder.TypeUnion\n          nullable: true\n          optional: true\n          types: [\n            { name: 'Object' }  // instanceof TypeBuilder.TypeName\n          ]\n        }\n      ]\n    }, { // instanceof TypeBuilder.TypeName\n      { name: 'string' }\n    }\n  ]\n}\n```\n\n### Specification\n\n#### Type name\n```javascript\nTypeName = {\n  name: string\n};\n```\n\n#### Type Union\n```javascript\nTypeUnion = {\n  optional: boolean,\n  nullable: boolean,\n  variable: boolean,\n  nonNullable: boolean,\n  all: boolean,\n  unknown: boolean,\n  types: Array.<TypeName|GenericType|FunctionType|RecordType>\n};\n```\n\n#### Generic type\n```javascript\nGenericType = {\n  genericTypeName: string,\n  parameterTypeUnions: Array.<TypeUnion>\n};\n```\n\n#### Function type\n```javascript\nFunctionType = {\n  parameterTypeUnions: Array.<TypeUnion>,\n  returnTypeUnion: TypeUnion|null,\n  isConstructor: boolean,\n  contextTypeUnion: TypeUnion|null\n};\n```\n\n#### Record type\n```javascript\nRecordType = {\n  entries: Array.<RecordEntry>\n};\n\nRecordType.Entry = {\n  name: string,\n  typeUnion: TypeUnion\n};\n```\n\n\n## License\nThis script licensed under the MIT.\nSee: [http://orgachem.mit-license.org](http://orgachem.mit-license.org)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Kuniwak/jsdoctypeparser.git"
  },
  "scripts": {
    "build": "gulp build",
    "lint": "eslint lib test && jscs lib test",
    "prepublidh": "npm run build",
    "pretest": "npm run lint",
    "test": "mocha test"
  },
  "version": "1.2.0"
}
